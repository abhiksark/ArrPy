name: CI

on:
  push:
    branches: [ main, develop, v*.x ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        backend: [python, cython]
        exclude:
          # C++ backend only on Linux for now
          - os: macos-latest
            backend: c
          - os: windows-latest
            backend: c

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ cmake
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Build Cython extensions
      if: matrix.backend == 'cython'
      run: |
        python setup.py build_ext --inplace
    
    - name: Build C++ extensions (Linux only)
      if: matrix.backend == 'c' && runner.os == 'Linux'
      run: |
        python setup_cpp.py build_ext --inplace
    
    - name: Run tests
      env:
        ARRPY_BACKEND: ${{ matrix.backend }}
      run: |
        pytest tests/ -v --cov=arrpy --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.backend }}

  benchmark:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Build extensions
      run: |
        python setup.py build_ext --inplace
    
    - name: Run benchmarks
      run: |
        python benchmarks/benchmark_v1.py --ci --json > benchmark_results.json
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'customBiggerIsBetter'
        output-file-path: benchmark_results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort mypy
    
    - name: Run ruff
      run: ruff check arrpy/
    
    - name: Check formatting with black
      run: black --check arrpy/
    
    - name: Check import sorting
      run: isort --check-only arrpy/
    
    - name: Run mypy
      run: mypy arrpy/ --ignore-missing-imports

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Build documentation
      run: |
        cd docs
        make html
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html